@page "/server/{id}"
@using Microsoft.AspNetCore.SignalR.Client
@using PlanningPoker.Shared
@using PlanningPoker.Shared.ViewModels
@inject NavigationManager NavigationManager

@if (CurrentServer != null && _currentPlayer != null)
{
    <SessionControlComponent @bind-Id="Id" @bind-Session="CurrentServer.CurrentSession" @bind-CurrentPlayer="_currentPlayer" @bind-HubConnection="_hubConnection" />
    <SessionRenderingComponent @bind-Server="CurrentServer" @bind-CurrentPlayer="_currentPlayer" />
}

@if(_currentPlayer == null)
{
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <p>
                        Pick a username, and begin planning!
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label>
                            Username
                            <input @bind="_username" size="20" class="form-control" />
                        </label>
                    </div>

                    <div class="form-group">
                        <button @onclick="Join">Join</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private HubConnection _hubConnection;

    private string? _username;

    private PlayerViewModel? _currentPlayer;

    public PokerServerViewModel? CurrentServer { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/poker"))
            .Build();

        _hubConnection.On<PokerServerViewModel>(Messages.UPDATED, newServer =>
        {
            CurrentServer = newServer;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    async Task Join()
    {
        await _hubConnection.SendAsync("Connect", Id);
        _currentPlayer = await _hubConnection.InvokeAsync<PlayerViewModel>("Join", Id, _username);
    }

    public bool HasJoined = false;
}