@using PlanningPoker.Hub.Client.Abstractions
@using PlanningPoker.Hub.Client.Abstractions.ViewModels
@using PlanningPoker.Hub.Client.Abstractions.ViewModels.Poker
@using System.Diagnostics
<div class="card poker_cards">
    <div class="card-body">
        <h5 class="card-title">Poker cards</h5>
        <h6 class="card-subtitle mb-2 text-muted">Click on a card to cast your vote</h6>
        <div class="row">
            @foreach (var card in Session.CardSet ?? Enumerable.Empty<string>())
            {
                <div class="col card-wrapper">
                    <button class="btn @(card == _chosenCard ? "btn-success" : "btn-default") poker_card btn-lg" @onclick="() => Vote(card)" disabled="@(!Session.CanVote || CurrentPlayer.Type == PlayerType.Observer)">
                        @if (card == ":daveexception:")
                        {
                            <img src="images\daveexception.webp" width="64" height="64"/>
                        }
                        else
                        {
                        @card
                        }
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<div class="row juxtaposed">
    <div class="col col-md-6 left">
        <div class="card session-controls">
            <div class="card-body">
                <h5 class="card-title">Session Controls</h5>
                <h6 class="card-subtitle mb-2 text-muted">Clear all current votes, or show once everyone has voted</h6>
                <div class="row">
                    <div class="col-md-6 col-sm-6 col-xs-6">
                        <button class="btn btn-default btn-block clear" @onclick="Clear" disabled="@(!Session.CanClear)">Clear</button>
                    </div>
                    <div class="col-md-6 col-sm-6 col-xs-6">
                        <button class="btn btn-primary btn-block show" @onclick="Show" disabled="@(!Session.CanShow)">Show</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col col-md-6 right">
        <div class="card session-results">
            <div class="card-body">
                <h5 class="card-title">Session Results</h5>
                <div class="row">
                    @if (Session.IsShown)
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Description</th>
                                    <th>Raw avg.</th>
                                    <th>Rounded avg.</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Estimated total value (excludes "None" role)</td>
                                    <td>@string.Join(", ", GetTotalValue()?.ToString("0.##")) (@GetRoundedTotalValue()?.ToString("0.##"))</td>
                                    <td>@string.Join(", ", GetTotalRoundedValue()?.ToString("0.##")) (@GetRoundedTotalRoundedValue()?.ToString("0.##"))</td>
                                </tr>
                                    <tr>
                                    <td>@($"Dev avg. value")</td>
                                    <td>@string.Join(", ", GetVoteAvg(PlayerTag.Developer)?.ToString("0.##"))</td>
                                    <td>@string.Join(", ", GetVoteRoundedAvg(PlayerTag.Developer)?.ToString("0.##"))</td>
                                    </tr>
                                <tr>
                                    <td>@($"QA avg. value")</td>
                                    <td>@string.Join(", ", GetVoteAvg(PlayerTag.Analyst)?.ToString("0.##"))</td>
                                    <td>@string.Join(", ", GetVoteRoundedAvg(PlayerTag.Analyst)?.ToString("0.##"))</td>
                                </tr>
                                <tr>
                                    <td>@($"None avg. value")</td>
                                    <td>@string.Join(", ", GetVoteAvg(PlayerTag.None)?.ToString("0.##"))</td>
                                    <td>@string.Join(", ", GetVoteRoundedAvg(PlayerTag.None)?.ToString("0.##"))</td>
                                </tr>
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        HubClient.OnVotesCleared(() =>
        {
            _chosenCard = default;
            StateHasChanged();
        });
    }

    private string _chosenCard;
    private static readonly string[] _fibCardCheck = new string[] { "3", "4", "5" };

    async Task Vote(string vote)
    {
        if (_chosenCard == vote)
        {
            _chosenCard = default;
            await HubClient.UnVote(Id, CurrentPlayer.Id);
        }
        else
        {
            _chosenCard = vote;
            await HubClient.Vote(Id, CurrentPlayer.Id, vote);
        }
    }

    Task Clear()
    {
        return HubClient.ClearVotes(Id);
    }

    Task Show()
    {
        return HubClient.ShowVotes(Id);
    }

    IEnumerable<string?> GetVoteMode()
    {
        var sortedVoteGroups = Session?.Votes?
            .Select(unparsedVote => unparsedVote.Value)
            .Where(vote => vote != null)
            .GroupBy(parsedVote => parsedVote)
            .OrderByDescending(group => group.Count());

        var highestVoteCount = sortedVoteGroups
            .Select(group => group.Count())
            .FirstOrDefault();

        return sortedVoteGroups
            .TakeWhile(group => group.Count() >= highestVoteCount)
            .Select(group => group.Key)
            .OrderBy(vote => vote);
    }

    decimal? GetVoteAvg(PlayerTag playerTag)
    {
        if (!Session.IsShown)
        {
            return default;
        }

        if (Session?.Votes == null || !Session.Votes.Any())
        {
            return default;
        }

        var sum = CalculateSum(playerTag);
        if (!sum.HasValue)
        {

            return default;
        }

        var totalValidVotes = Session.Votes
            .Where(vote => Session?.VoteTags?.ContainsKey(vote.Key) == true && Session.VoteTags[vote.Key] == (int)playerTag)
            .Select(unparsedVote => DecimalParseOrNull(unparsedVote.Value))
            .Count(vote => vote != null);
        if (totalValidVotes == 0)
        {
            return default;
        }

        return sum.Value / totalValidVotes;
    }

    decimal? GetVoteRoundedAvg(PlayerTag playerTag)
    {
        if (!Session.IsShown)
        {
            return default;
        }

        if (Session?.Votes == null || !Session.Votes.Any())
        {
            return default;
        }

        var sum = CalculateSum(playerTag);
        if (!sum.HasValue)
        {

            return default;
        }

        var totalValidVotes = Session.Votes
            .Where(vote => Session?.VoteTags?.ContainsKey(vote.Key) == true && Session.VoteTags[vote.Key] == (int)playerTag)
            .Select(unparsedVote => DecimalParseOrNull(unparsedVote.Value))
            .Count(vote => vote != null);
        if (totalValidVotes == 0)
        {
            return default;
        }

        var totalValue = sum.Value / totalValidVotes;
        totalValue = GetNextHighestCardOrValue(totalValue);

        return totalValue;
    }

    decimal? GetTotalValue()
    {
        if (!Session.IsShown)
        {
            return default;
        }

        if (Session?.Votes == null || !Session.Votes.Any())
        {
            return default;
        }

        var devSum = GetVoteAvg(PlayerTag.Developer);
        var qaSum = GetVoteAvg(PlayerTag.Analyst);

        var totalEffort = (devSum ?? 0m) + (qaSum ?? 0m);

        return totalEffort;
    }

    decimal? GetTotalRoundedValue()
    {
        if (!Session.IsShown)
        {
            return default;
        }

        if (Session?.Votes == null || !Session.Votes.Any())
        {
            return default;
        }

        var devSum = GetVoteRoundedAvg(PlayerTag.Developer);
        var qaSum = GetVoteRoundedAvg(PlayerTag.Analyst);

        var totalEffort = (devSum ?? 0m) + (qaSum ?? 0m);

        return totalEffort;
    }

    decimal? GetRoundedTotalValue()
    {
        if (!Session.IsShown)
        {
            return default;
        }

        if (Session?.Votes == null || !Session.Votes.Any())
        {
            return default;
        }

        var devSum = GetVoteAvg(PlayerTag.Developer);
        var qaSum = GetVoteAvg(PlayerTag.Analyst);

        var totalValue = Math.Ceiling((devSum ?? 0m) + (qaSum ?? 0m));
        totalValue = GetNextHighestCardOrValue(totalValue);

        return totalValue;
    }

    decimal? GetRoundedTotalRoundedValue()
    {
        if (!Session.IsShown)
        {
            return default;
        }

        if (Session?.Votes == null || !Session.Votes.Any())
        {
            return default;
        }

        var devSum = GetVoteRoundedAvg(PlayerTag.Developer);
        var qaSum = GetVoteRoundedAvg(PlayerTag.Analyst);

        var totalValue = Math.Ceiling((devSum ?? 0m) + (qaSum ?? 0m));
        totalValue = GetNextHighestCardOrValue(totalValue);

        return totalValue;
    }

    decimal GetNextHighestCardOrValue(decimal value)
    {
        if (Session?.CardSet?.Count > 4 &&
            Session.CardSet.Count(x => _fibCardCheck.Contains(x)) == 2)
        {
            foreach (decimal card in Session.CardSet.Select(x => DecimalParseOrNull(x)).Where(x => x != null).Select(x => x.HasValue ? x.Value : 0).Order())
            {
                if (card >= value)
                {
                    return card; // Return the next highest value
                }
            }
        }

        return value;
    }

    decimal? CalculateSum()
    {
        return Session.Votes?.Sum(pair => DecimalParseOrNull(pair.Value) ?? default);
    }

    decimal? CalculateSum(PlayerTag playerTag)
    {
        return Session.Votes?
            .Where(vote => Session?.VoteTags?.ContainsKey(vote.Key) == true && Session.VoteTags[vote.Key] == (int)playerTag)
            .Sum(pair => (DecimalParseOrNull(pair.Value) ?? default) * 2) / 2;
    }

    decimal? DecimalParseOrNull(string val)
    {
        var parsed = decimal.TryParse(val, out var parsedResult);
        return parsed ? (decimal?)parsedResult : null;
    }

    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public EventCallback<Guid> IdChanged { get; set; }

    [Parameter]
    public PokerSessionViewModel Session { get; set; }

    [Parameter]
    public EventCallback<PokerSessionViewModel> SessionChanged { get; set; }

    [Parameter]
    public PlayerViewModel CurrentPlayer { get; set; }

    [Parameter]
    public EventCallback<PlayerViewModel> CurrentPlayerChanged { get; set; }

    [Parameter]
    public IPlanningPokerHubClient HubClient { get; set; }

    [Parameter]
    public EventCallback<IPlanningPokerHubClient> HubClientChanged { get; set; }
}
