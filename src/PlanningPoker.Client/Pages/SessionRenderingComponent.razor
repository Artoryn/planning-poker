@using PlanningPoker.Core.Models
@using PlanningPoker.Shared.ViewModels
@using Microsoft.AspNetCore.SignalR.Client

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Participants</h5>
        <div class="row">
            <table class="table table-striped">
                <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Vote</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var player in Server?.Players?.Where(p => p.Type == PlayerType.Participant) ?? Enumerable.Empty<PlayerViewModel>())
                {
                    var hasVoted = Server?.CurrentSession?.Votes?.ContainsKey(player.PublicId.ToString()) ?? false;
                    var currentPlayerVote = hasVoted ? Server.CurrentSession.Votes[player.PublicId.ToString()] : string.Empty;
                    <tr class="@(hasVoted ? "table-success" : "")">
                        <td>
                            @if (hasVoted)
                            {
                                <span class="oi oi-check"></span>
                            }
                        </td>
                        <td>
                            @player.Name
                        </td>
                        <td>
                            @currentPlayerVote
                        </td>
                        <td>
                            <button class="kick-btn btn float-right" @onclick="() => Kick(player.PublicId)">
                                <span class="kick-icon oi oi-x"></span>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Observers</h5>
        <div class="row">
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Name</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var player in Server?.Players?.Where(p => p.Type == PlayerType.Observer) ?? Enumerable.Empty<PlayerViewModel>())
                {
                    <tr>
                        <td>
                            @player.Name
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public EventCallback<string> IdChanged { get; set; }

    [Parameter]
    public HubConnection HubConnection { get; set; }

    [Parameter]
    public EventCallback<HubConnection> HubConnectionChanged { get; set; }

    [Parameter]
    public PlayerViewModel CurrentPlayer { get; set; }

    [Parameter]
    public EventCallback<PlayerViewModel> CurrentPlayerChanged { get; set; }

    [Parameter]
    public PokerServerViewModel Server { get; set; }

    [Parameter]
    public EventCallback<PokerServerViewModel> ServerChanged { get; set; }

    Task Kick(int playerPublicId)
    {
        return HubConnection.SendAsync("Kick", Id, CurrentPlayer.Id, playerPublicId);
    }

}